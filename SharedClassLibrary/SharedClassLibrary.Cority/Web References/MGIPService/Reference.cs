//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SharedClassLibrary.Cority.MGIPService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'EndpointReference' from namespace 'http://www.w3.org/2005/08/addressing' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WSHttpBinding_IMGIPService", Namespace="http://medgate.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MedgateServiceFault))]
    public partial class MGIPService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModelPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveImportFormatOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoImportCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoImport2OperationCompleted;
        
        private System.Threading.SendOrPostCallback DoImportWithDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoImportOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserMGIPPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImportTreeRootsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MGIPService() {
            this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
            this.Url = global::SharedClassLibrary.Cority.Properties.Settings.Default.SharedClassLibrary_Cority_MGIPService_MGIPService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTablesCompletedEventHandler GetTablesCompleted;
        
        /// <remarks/>
        public event GetModelPropertiesCompletedEventHandler GetModelPropertiesCompleted;
        
        /// <remarks/>
        public event SaveImportFormatCompletedEventHandler SaveImportFormatCompleted;
        
        /// <remarks/>
        public event DoImportCSVCompletedEventHandler DoImportCSVCompleted;
        
        /// <remarks/>
        public event DoImport2CompletedEventHandler DoImport2Completed;
        
        /// <remarks/>
        public event DoImportWithDocumentCompletedEventHandler DoImportWithDocumentCompleted;
        
        /// <remarks/>
        public event DoImportCompletedEventHandler DoImportCompleted;
        
        /// <remarks/>
        public event ValidateUserLoginCompletedEventHandler ValidateUserLoginCompleted;
        
        /// <remarks/>
        public event ValidateUserMGIPPermissionCompletedEventHandler ValidateUserMGIPPermissionCompleted;
        
        /// <remarks/>
        public event ValidateUserCompletedEventHandler ValidateUserCompleted;
        
        /// <remarks/>
        public event GetImportTreeRootsCompletedEventHandler GetImportTreeRootsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/GetTables", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/Medgate.NMedgate.Web.WebService")]
        public MGIPServiceMedgateModelTable[] GetTables([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password) {
            object[] results = this.Invoke("GetTables", new object[] {
                        username,
                        password});
            return ((MGIPServiceMedgateModelTable[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTablesAsync(string username, string password) {
            this.GetTablesAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetTablesAsync(string username, string password, object userState) {
            if ((this.GetTablesOperationCompleted == null)) {
                this.GetTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTablesOperationCompleted);
            }
            this.InvokeAsync("GetTables", new object[] {
                        username,
                        password}, this.GetTablesOperationCompleted, userState);
        }
        
        private void OnGetTablesOperationCompleted(object arg) {
            if ((this.GetTablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTablesCompleted(this, new GetTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/GetModelProperties", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("dataDictionary", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfstringArrayOfstringty7Ep6D1", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1KeyValueOfstringArrayOfstringty7Ep6D1[] GetModelProperties([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string model, ref bool skipAudioRecords, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool skipAudioRecordsSpecified, ref bool isAudiometricTest, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool isAudiometricTestSpecified, ref bool softKeyOptions, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool softKeyOptionsSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] out string[] selectedProperties, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] out string[] availableProperties, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] out string[] uniqueKeyProperties) {
            object[] results = this.Invoke("GetModelProperties", new object[] {
                        username,
                        password,
                        model,
                        skipAudioRecords,
                        skipAudioRecordsSpecified,
                        isAudiometricTest,
                        isAudiometricTestSpecified,
                        softKeyOptions,
                        softKeyOptionsSpecified});
            skipAudioRecords = ((bool)(results[1]));
            skipAudioRecordsSpecified = ((bool)(results[2]));
            isAudiometricTest = ((bool)(results[3]));
            isAudiometricTestSpecified = ((bool)(results[4]));
            softKeyOptions = ((bool)(results[5]));
            softKeyOptionsSpecified = ((bool)(results[6]));
            selectedProperties = ((string[])(results[7]));
            availableProperties = ((string[])(results[8]));
            uniqueKeyProperties = ((string[])(results[9]));
            return ((ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1KeyValueOfstringArrayOfstringty7Ep6D1[])(results[0]));
        }
        
        /// <remarks/>
        public void GetModelPropertiesAsync(string username, string password, string model, bool skipAudioRecords, bool skipAudioRecordsSpecified, bool isAudiometricTest, bool isAudiometricTestSpecified, bool softKeyOptions, bool softKeyOptionsSpecified) {
            this.GetModelPropertiesAsync(username, password, model, skipAudioRecords, skipAudioRecordsSpecified, isAudiometricTest, isAudiometricTestSpecified, softKeyOptions, softKeyOptionsSpecified, null);
        }
        
        /// <remarks/>
        public void GetModelPropertiesAsync(string username, string password, string model, bool skipAudioRecords, bool skipAudioRecordsSpecified, bool isAudiometricTest, bool isAudiometricTestSpecified, bool softKeyOptions, bool softKeyOptionsSpecified, object userState) {
            if ((this.GetModelPropertiesOperationCompleted == null)) {
                this.GetModelPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModelPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetModelProperties", new object[] {
                        username,
                        password,
                        model,
                        skipAudioRecords,
                        skipAudioRecordsSpecified,
                        isAudiometricTest,
                        isAudiometricTestSpecified,
                        softKeyOptions,
                        softKeyOptionsSpecified}, this.GetModelPropertiesOperationCompleted, userState);
        }
        
        private void OnGetModelPropertiesOperationCompleted(object arg) {
            if ((this.GetModelPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModelPropertiesCompleted(this, new GetModelPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/SaveImportFormat", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveImportFormat([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string model, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string importFormat) {
            this.Invoke("SaveImportFormat", new object[] {
                        username,
                        password,
                        model,
                        importFormat});
        }
        
        /// <remarks/>
        public void SaveImportFormatAsync(string username, string password, string model, string importFormat) {
            this.SaveImportFormatAsync(username, password, model, importFormat, null);
        }
        
        /// <remarks/>
        public void SaveImportFormatAsync(string username, string password, string model, string importFormat, object userState) {
            if ((this.SaveImportFormatOperationCompleted == null)) {
                this.SaveImportFormatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveImportFormatOperationCompleted);
            }
            this.InvokeAsync("SaveImportFormat", new object[] {
                        username,
                        password,
                        model,
                        importFormat}, this.SaveImportFormatOperationCompleted, userState);
        }
        
        private void OnSaveImportFormatOperationCompleted(object arg) {
            if ((this.SaveImportFormatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveImportFormatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/DoImportCSV", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DoImportCSV(
                    [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] data, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string importFormat, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string currentModel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, 
                    bool updateExistingRecords, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool xmlFileSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dateFormat, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] object customLogicParam, 
                    bool bypassBR, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool bypassBRSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customLogicString) {
            object[] results = this.Invoke("DoImportCSV", new object[] {
                        data,
                        importFormat,
                        currentModel,
                        username,
                        password,
                        updateExistingRecords,
                        updateExistingRecordsSpecified,
                        autoInsertBaseTableValues,
                        autoInsertBaseTableValuesSpecified,
                        insertMultiple,
                        insertMultipleSpecified,
                        alwaysInsert,
                        alwaysInsertSpecified,
                        containsHeaderRow,
                        containsHeaderRowSpecified,
                        xmlFile,
                        xmlFileSpecified,
                        dateFormat,
                        customLogicParam,
                        bypassBR,
                        bypassBRSpecified,
                        customLogicString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoImportCSVAsync(
                    string[] data, 
                    string importFormat, 
                    string currentModel, 
                    string username, 
                    string password, 
                    bool updateExistingRecords, 
                    bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    bool xmlFileSpecified, 
                    string dateFormat, 
                    object customLogicParam, 
                    bool bypassBR, 
                    bool bypassBRSpecified, 
                    string customLogicString) {
            this.DoImportCSVAsync(data, importFormat, currentModel, username, password, updateExistingRecords, updateExistingRecordsSpecified, autoInsertBaseTableValues, autoInsertBaseTableValuesSpecified, insertMultiple, insertMultipleSpecified, alwaysInsert, alwaysInsertSpecified, containsHeaderRow, containsHeaderRowSpecified, xmlFile, xmlFileSpecified, dateFormat, customLogicParam, bypassBR, bypassBRSpecified, customLogicString, null);
        }
        
        /// <remarks/>
        public void DoImportCSVAsync(
                    string[] data, 
                    string importFormat, 
                    string currentModel, 
                    string username, 
                    string password, 
                    bool updateExistingRecords, 
                    bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    bool xmlFileSpecified, 
                    string dateFormat, 
                    object customLogicParam, 
                    bool bypassBR, 
                    bool bypassBRSpecified, 
                    string customLogicString, 
                    object userState) {
            if ((this.DoImportCSVOperationCompleted == null)) {
                this.DoImportCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoImportCSVOperationCompleted);
            }
            this.InvokeAsync("DoImportCSV", new object[] {
                        data,
                        importFormat,
                        currentModel,
                        username,
                        password,
                        updateExistingRecords,
                        updateExistingRecordsSpecified,
                        autoInsertBaseTableValues,
                        autoInsertBaseTableValuesSpecified,
                        insertMultiple,
                        insertMultipleSpecified,
                        alwaysInsert,
                        alwaysInsertSpecified,
                        containsHeaderRow,
                        containsHeaderRowSpecified,
                        xmlFile,
                        xmlFileSpecified,
                        dateFormat,
                        customLogicParam,
                        bypassBR,
                        bypassBRSpecified,
                        customLogicString}, this.DoImportCSVOperationCompleted, userState);
        }
        
        private void OnDoImportCSVOperationCompleted(object arg) {
            if ((this.DoImportCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoImportCSVCompleted(this, new DoImportCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/DoImport2", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DoImport2(
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] data, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string importFormat, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string currentModel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, 
                    bool updateExistingRecords, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool xmlFileSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dateFormat, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] object customLogicParam, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customLogicString) {
            object[] results = this.Invoke("DoImport2", new object[] {
                        data,
                        importFormat,
                        currentModel,
                        username,
                        password,
                        updateExistingRecords,
                        updateExistingRecordsSpecified,
                        autoInsertBaseTableValues,
                        autoInsertBaseTableValuesSpecified,
                        insertMultiple,
                        insertMultipleSpecified,
                        alwaysInsert,
                        alwaysInsertSpecified,
                        containsHeaderRow,
                        containsHeaderRowSpecified,
                        xmlFile,
                        xmlFileSpecified,
                        dateFormat,
                        customLogicParam,
                        customLogicString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoImport2Async(
                    byte[] data, 
                    string importFormat, 
                    string currentModel, 
                    string username, 
                    string password, 
                    bool updateExistingRecords, 
                    bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    bool xmlFileSpecified, 
                    string dateFormat, 
                    object customLogicParam, 
                    string customLogicString) {
            this.DoImport2Async(data, importFormat, currentModel, username, password, updateExistingRecords, updateExistingRecordsSpecified, autoInsertBaseTableValues, autoInsertBaseTableValuesSpecified, insertMultiple, insertMultipleSpecified, alwaysInsert, alwaysInsertSpecified, containsHeaderRow, containsHeaderRowSpecified, xmlFile, xmlFileSpecified, dateFormat, customLogicParam, customLogicString, null);
        }
        
        /// <remarks/>
        public void DoImport2Async(
                    byte[] data, 
                    string importFormat, 
                    string currentModel, 
                    string username, 
                    string password, 
                    bool updateExistingRecords, 
                    bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    bool xmlFileSpecified, 
                    string dateFormat, 
                    object customLogicParam, 
                    string customLogicString, 
                    object userState) {
            if ((this.DoImport2OperationCompleted == null)) {
                this.DoImport2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoImport2OperationCompleted);
            }
            this.InvokeAsync("DoImport2", new object[] {
                        data,
                        importFormat,
                        currentModel,
                        username,
                        password,
                        updateExistingRecords,
                        updateExistingRecordsSpecified,
                        autoInsertBaseTableValues,
                        autoInsertBaseTableValuesSpecified,
                        insertMultiple,
                        insertMultipleSpecified,
                        alwaysInsert,
                        alwaysInsertSpecified,
                        containsHeaderRow,
                        containsHeaderRowSpecified,
                        xmlFile,
                        xmlFileSpecified,
                        dateFormat,
                        customLogicParam,
                        customLogicString}, this.DoImport2OperationCompleted, userState);
        }
        
        private void OnDoImport2OperationCompleted(object arg) {
            if ((this.DoImport2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoImport2Completed(this, new DoImport2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/DoImportWithDocument", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DoImportWithDocument(
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] data, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string importFormat, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string currentModel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, 
                    bool updateExistingRecords, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool xmlFileSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dateFormat, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] object customLogicParam, 
                    bool bypassBR, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool bypassBRSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customLogicString, 
                    [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", DataType="base64Binary")] byte[][] documents, 
                    [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] documentNames, 
                    [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] documentMessages) {
            object[] results = this.Invoke("DoImportWithDocument", new object[] {
                        data,
                        importFormat,
                        currentModel,
                        username,
                        password,
                        updateExistingRecords,
                        updateExistingRecordsSpecified,
                        autoInsertBaseTableValues,
                        autoInsertBaseTableValuesSpecified,
                        insertMultiple,
                        insertMultipleSpecified,
                        alwaysInsert,
                        alwaysInsertSpecified,
                        containsHeaderRow,
                        containsHeaderRowSpecified,
                        xmlFile,
                        xmlFileSpecified,
                        dateFormat,
                        customLogicParam,
                        bypassBR,
                        bypassBRSpecified,
                        customLogicString,
                        documents,
                        documentNames,
                        documentMessages});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoImportWithDocumentAsync(
                    byte[] data, 
                    string importFormat, 
                    string currentModel, 
                    string username, 
                    string password, 
                    bool updateExistingRecords, 
                    bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    bool xmlFileSpecified, 
                    string dateFormat, 
                    object customLogicParam, 
                    bool bypassBR, 
                    bool bypassBRSpecified, 
                    string customLogicString, 
                    byte[][] documents, 
                    string[] documentNames, 
                    string[] documentMessages) {
            this.DoImportWithDocumentAsync(data, importFormat, currentModel, username, password, updateExistingRecords, updateExistingRecordsSpecified, autoInsertBaseTableValues, autoInsertBaseTableValuesSpecified, insertMultiple, insertMultipleSpecified, alwaysInsert, alwaysInsertSpecified, containsHeaderRow, containsHeaderRowSpecified, xmlFile, xmlFileSpecified, dateFormat, customLogicParam, bypassBR, bypassBRSpecified, customLogicString, documents, documentNames, documentMessages, null);
        }
        
        /// <remarks/>
        public void DoImportWithDocumentAsync(
                    byte[] data, 
                    string importFormat, 
                    string currentModel, 
                    string username, 
                    string password, 
                    bool updateExistingRecords, 
                    bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    bool xmlFileSpecified, 
                    string dateFormat, 
                    object customLogicParam, 
                    bool bypassBR, 
                    bool bypassBRSpecified, 
                    string customLogicString, 
                    byte[][] documents, 
                    string[] documentNames, 
                    string[] documentMessages, 
                    object userState) {
            if ((this.DoImportWithDocumentOperationCompleted == null)) {
                this.DoImportWithDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoImportWithDocumentOperationCompleted);
            }
            this.InvokeAsync("DoImportWithDocument", new object[] {
                        data,
                        importFormat,
                        currentModel,
                        username,
                        password,
                        updateExistingRecords,
                        updateExistingRecordsSpecified,
                        autoInsertBaseTableValues,
                        autoInsertBaseTableValuesSpecified,
                        insertMultiple,
                        insertMultipleSpecified,
                        alwaysInsert,
                        alwaysInsertSpecified,
                        containsHeaderRow,
                        containsHeaderRowSpecified,
                        xmlFile,
                        xmlFileSpecified,
                        dateFormat,
                        customLogicParam,
                        bypassBR,
                        bypassBRSpecified,
                        customLogicString,
                        documents,
                        documentNames,
                        documentMessages}, this.DoImportWithDocumentOperationCompleted, userState);
        }
        
        private void OnDoImportWithDocumentOperationCompleted(object arg) {
            if ((this.DoImportWithDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoImportWithDocumentCompleted(this, new DoImportWithDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/DoImport", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DoImport(
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] data, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string importFormat, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string currentModel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, 
                    bool updateExistingRecords, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool xmlFileSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dateFormat, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] object customLogicParam, 
                    bool bypassBR, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool bypassBRSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customLogicString) {
            object[] results = this.Invoke("DoImport", new object[] {
                        data,
                        importFormat,
                        currentModel,
                        username,
                        password,
                        updateExistingRecords,
                        updateExistingRecordsSpecified,
                        autoInsertBaseTableValues,
                        autoInsertBaseTableValuesSpecified,
                        insertMultiple,
                        insertMultipleSpecified,
                        alwaysInsert,
                        alwaysInsertSpecified,
                        containsHeaderRow,
                        containsHeaderRowSpecified,
                        xmlFile,
                        xmlFileSpecified,
                        dateFormat,
                        customLogicParam,
                        bypassBR,
                        bypassBRSpecified,
                        customLogicString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoImportAsync(
                    byte[] data, 
                    string importFormat, 
                    string currentModel, 
                    string username, 
                    string password, 
                    bool updateExistingRecords, 
                    bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    bool xmlFileSpecified, 
                    string dateFormat, 
                    object customLogicParam, 
                    bool bypassBR, 
                    bool bypassBRSpecified, 
                    string customLogicString) {
            this.DoImportAsync(data, importFormat, currentModel, username, password, updateExistingRecords, updateExistingRecordsSpecified, autoInsertBaseTableValues, autoInsertBaseTableValuesSpecified, insertMultiple, insertMultipleSpecified, alwaysInsert, alwaysInsertSpecified, containsHeaderRow, containsHeaderRowSpecified, xmlFile, xmlFileSpecified, dateFormat, customLogicParam, bypassBR, bypassBRSpecified, customLogicString, null);
        }
        
        /// <remarks/>
        public void DoImportAsync(
                    byte[] data, 
                    string importFormat, 
                    string currentModel, 
                    string username, 
                    string password, 
                    bool updateExistingRecords, 
                    bool updateExistingRecordsSpecified, 
                    bool autoInsertBaseTableValues, 
                    bool autoInsertBaseTableValuesSpecified, 
                    bool insertMultiple, 
                    bool insertMultipleSpecified, 
                    bool alwaysInsert, 
                    bool alwaysInsertSpecified, 
                    bool containsHeaderRow, 
                    bool containsHeaderRowSpecified, 
                    bool xmlFile, 
                    bool xmlFileSpecified, 
                    string dateFormat, 
                    object customLogicParam, 
                    bool bypassBR, 
                    bool bypassBRSpecified, 
                    string customLogicString, 
                    object userState) {
            if ((this.DoImportOperationCompleted == null)) {
                this.DoImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoImportOperationCompleted);
            }
            this.InvokeAsync("DoImport", new object[] {
                        data,
                        importFormat,
                        currentModel,
                        username,
                        password,
                        updateExistingRecords,
                        updateExistingRecordsSpecified,
                        autoInsertBaseTableValues,
                        autoInsertBaseTableValuesSpecified,
                        insertMultiple,
                        insertMultipleSpecified,
                        alwaysInsert,
                        alwaysInsertSpecified,
                        containsHeaderRow,
                        containsHeaderRowSpecified,
                        xmlFile,
                        xmlFileSpecified,
                        dateFormat,
                        customLogicParam,
                        bypassBR,
                        bypassBRSpecified,
                        customLogicString}, this.DoImportOperationCompleted, userState);
        }
        
        private void OnDoImportOperationCompleted(object arg) {
            if ((this.DoImportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoImportCompleted(this, new DoImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/ValidateUserLogin", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ValidateUserLogin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool ValidateUserLoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ValidateUserLoginResultSpecified) {
            object[] results = this.Invoke("ValidateUserLogin", new object[] {
                        username,
                        password});
            ValidateUserLoginResult = ((bool)(results[0]));
            ValidateUserLoginResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ValidateUserLoginAsync(string username, string password) {
            this.ValidateUserLoginAsync(username, password, null);
        }
        
        /// <remarks/>
        public void ValidateUserLoginAsync(string username, string password, object userState) {
            if ((this.ValidateUserLoginOperationCompleted == null)) {
                this.ValidateUserLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserLoginOperationCompleted);
            }
            this.InvokeAsync("ValidateUserLogin", new object[] {
                        username,
                        password}, this.ValidateUserLoginOperationCompleted, userState);
        }
        
        private void OnValidateUserLoginOperationCompleted(object arg) {
            if ((this.ValidateUserLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserLoginCompleted(this, new ValidateUserLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/ValidateUserMGIPPermission", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ValidateUserMGIPPermission([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, out bool ValidateUserMGIPPermissionResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ValidateUserMGIPPermissionResultSpecified) {
            object[] results = this.Invoke("ValidateUserMGIPPermission", new object[] {
                        username});
            ValidateUserMGIPPermissionResult = ((bool)(results[0]));
            ValidateUserMGIPPermissionResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ValidateUserMGIPPermissionAsync(string username) {
            this.ValidateUserMGIPPermissionAsync(username, null);
        }
        
        /// <remarks/>
        public void ValidateUserMGIPPermissionAsync(string username, object userState) {
            if ((this.ValidateUserMGIPPermissionOperationCompleted == null)) {
                this.ValidateUserMGIPPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserMGIPPermissionOperationCompleted);
            }
            this.InvokeAsync("ValidateUserMGIPPermission", new object[] {
                        username}, this.ValidateUserMGIPPermissionOperationCompleted, userState);
        }
        
        private void OnValidateUserMGIPPermissionOperationCompleted(object arg) {
            if ((this.ValidateUserMGIPPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserMGIPPermissionCompleted(this, new ValidateUserMGIPPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/ValidateUser", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ValidateUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password) {
            this.Invoke("ValidateUser", new object[] {
                        username,
                        password});
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string username, string password) {
            this.ValidateUserAsync(username, password, null);
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string username, string password, object userState) {
            if ((this.ValidateUserOperationCompleted == null)) {
                this.ValidateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserOperationCompleted);
            }
            this.InvokeAsync("ValidateUser", new object[] {
                        username,
                        password}, this.ValidateUserOperationCompleted, userState);
        }
        
        private void OnValidateUserOperationCompleted(object arg) {
            if ((this.ValidateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://medgate.com/IMGIPService/GetImportTreeRoots", RequestNamespace="http://medgate.com", ResponseNamespace="http://medgate.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfintstring", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public ArrayOfKeyValueOfintstringKeyValueOfintstring[] GetImportTreeRoots() {
            object[] results = this.Invoke("GetImportTreeRoots", new object[0]);
            return ((ArrayOfKeyValueOfintstringKeyValueOfintstring[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImportTreeRootsAsync() {
            this.GetImportTreeRootsAsync(null);
        }
        
        /// <remarks/>
        public void GetImportTreeRootsAsync(object userState) {
            if ((this.GetImportTreeRootsOperationCompleted == null)) {
                this.GetImportTreeRootsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImportTreeRootsOperationCompleted);
            }
            this.InvokeAsync("GetImportTreeRoots", new object[0], this.GetImportTreeRootsOperationCompleted, userState);
        }
        
        private void OnGetImportTreeRootsOperationCompleted(object arg) {
            if ((this.GetImportTreeRootsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImportTreeRootsCompleted(this, new GetImportTreeRootsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MGIPService.MedgateModelTable", Namespace="http://schemas.datacontract.org/2004/07/Medgate.NMedgate.Web.WebService")]
    public partial class MGIPServiceMedgateModelTable {
        
        private string descriptionField;
        
        private string entityField;
        
        private string modelField;
        
        private string moduleField;
        
        private string tableNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Entity {
            get {
                return this.entityField;
            }
            set {
                this.entityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Module {
            get {
                return this.moduleField;
            }
            set {
                this.moduleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TableName {
            get {
                return this.tableNameField;
            }
            set {
                this.tableNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/Medgate.NMedgate.Core.Wcf.Faults")]
    public partial class MedgateServiceFault {
        
        private ServiceErrorCodes errorCodeField;
        
        private bool errorCodeFieldSpecified;
        
        private string errorMessageField;
        
        /// <remarks/>
        public ServiceErrorCodes ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorCodeSpecified {
            get {
                return this.errorCodeFieldSpecified;
            }
            set {
                this.errorCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/Medgate.NMedgate.Core.Wcf.Services")]
    public enum ServiceErrorCodes {
        
        /// <remarks/>
        Generic,
        
        /// <remarks/>
        NullParameter,
        
        /// <remarks/>
        RecordDoesNotExist,
        
        /// <remarks/>
        PropertLengthExceeded,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
    public partial class ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1KeyValueOfstringArrayOfstringty7Ep6D1 {
        
        private string keyField;
        
        private string[] valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public string[] Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
    public partial class ArrayOfKeyValueOfintstringKeyValueOfintstring {
        
        private int keyField;
        
        private string valueField;
        
        /// <remarks/>
        public int Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetTablesCompletedEventHandler(object sender, GetTablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MGIPServiceMedgateModelTable[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MGIPServiceMedgateModelTable[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetModelPropertiesCompletedEventHandler(object sender, GetModelPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModelPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModelPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1KeyValueOfstringArrayOfstringty7Ep6D1[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1KeyValueOfstringArrayOfstringty7Ep6D1[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool skipAudioRecords {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool skipAudioRecordsSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool isAudiometricTest {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool isAudiometricTestSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool softKeyOptions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool softKeyOptionsSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string[] selectedProperties {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string[] availableProperties {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string[] uniqueKeyProperties {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[9]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SaveImportFormatCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DoImportCSVCompletedEventHandler(object sender, DoImportCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoImportCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoImportCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DoImport2CompletedEventHandler(object sender, DoImport2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoImport2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoImport2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DoImportWithDocumentCompletedEventHandler(object sender, DoImportWithDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoImportWithDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoImportWithDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DoImportCompletedEventHandler(object sender, DoImportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ValidateUserLoginCompletedEventHandler(object sender, ValidateUserLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ValidateUserLoginResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ValidateUserLoginResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ValidateUserMGIPPermissionCompletedEventHandler(object sender, ValidateUserMGIPPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserMGIPPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserMGIPPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ValidateUserMGIPPermissionResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ValidateUserMGIPPermissionResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ValidateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetImportTreeRootsCompletedEventHandler(object sender, GetImportTreeRootsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImportTreeRootsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImportTreeRootsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ArrayOfKeyValueOfintstringKeyValueOfintstring[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ArrayOfKeyValueOfintstringKeyValueOfintstring[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591